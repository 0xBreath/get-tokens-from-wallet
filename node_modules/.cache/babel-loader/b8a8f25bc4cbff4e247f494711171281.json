{"ast":null,"code":"import * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl, Connection } from \"@solana/web3.js\";\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"); // Options to change RPC network\n\nconst CLUSTER = {\n  MAINNET: \"mainnet-beta\",\n  TESTNET: \"testnet\",\n  DEVNET: \"devnet\"\n}; // Initialize Connection class\n\nconst connect = new Connection(clusterApiUrl(CLUSTER.DEVNET)); // Exported function\n\nasync function getTokens(wallet) {\n  let tokenAccounts = [];\n  tokenAccounts.push(connect.getParsedTokenAccountsByOwner(wallet, {\n    programId: TOKEN_METADATA_PROGRAM_ID\n  }).then(e => console.log(e.value)));\n  console.log(tokenAccounts);\n  getMultipleAccounts(tokenAccounts);\n}\n\nconst getMultipleAccounts = async (tokens) => {\n  let metadataAddresses = [];\n\n  for (let i = 0; i < tokens.length; i++) {\n    metadataAddresses[i] = getMetadata(tokens[i]);\n  }\n};\n\nconst getMetadata = async (tokenIndex) => {};\n\nexport default getTokens;","map":{"version":3,"sources":["/Users/drewriester/Coding/Solana/upgrade-nft/src/metadata/getMeta.ts"],"names":["anchor","clusterApiUrl","Connection","TOKEN_METADATA_PROGRAM_ID","web3","PublicKey","CLUSTER","MAINNET","TESTNET","DEVNET","connect","getTokens","wallet","tokenAccounts","push","getParsedTokenAccountsByOwner","programId","then","e","console","log","value","getMultipleAccounts","tokens","metadataAddresses","i","length","getMetadata","tokenIndex"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,uBAAxB;AACA,SAEIC,aAFJ,EAIIC,UAJJ,QAMS,iBANT;AAaA,MAAMC,yBAAyB,GAAG,IAAIH,MAAM,CAACI,IAAP,CAAYC,SAAhB,CAC9B,6CAD8B,CAAlC,C,CAIA;;AACA,MAAMC,OAAO,GAAG;AACZC,EAAAA,OAAO,EAAE,cADG;AAEZC,EAAAA,OAAO,EAAE,SAFG;AAGZC,EAAAA,MAAM,EAAE;AAHI,CAAhB,C,CAMA;;AACA,MAAMC,OAAO,GAAG,IAAIR,UAAJ,CACZD,aAAa,CAACK,OAAO,CAACG,MAAT,CADD,CAAhB,C,CAIA;;AACA,eAAeE,SAAf,CACIC,MADJ,EAEgB;AAEZ,MAAIC,aAA2B,GAAG,EAAlC;AACAA,EAAAA,aAAa,CAACC,IAAd,CAAoBJ,OAAO,CAACK,6BAAR,CAChBH,MADgB,EAEhB;AAACI,IAAAA,SAAS,EAAEb;AAAZ,GAFgB,EAGlBc,IAHkB,CAGbC,CAAC,IAAIC,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,KAAd,CAHQ,CAApB;AAMAF,EAAAA,OAAO,CAACC,GAAR,CAAYP,aAAZ;AAEAS,EAAAA,mBAAmB,CAACT,aAAD,CAAnB;AACH;;AAED,MAAMS,mBAAmB,GAAG,OACxBC,MADwB,KAEvB;AAED,MAAIC,iBAAiB,GAAG,EAAxB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpCD,IAAAA,iBAAiB,CAACC,CAAD,CAAjB,GAAuBE,WAAW,CAACJ,MAAM,CAACE,CAAD,CAAP,CAAlC;AACH;AACJ,CARD;;AAUA,MAAME,WAAW,GAAG,OAChBC,UADgB,KAEf,CAEJ,CAJD;;AAMA,eAAejB,SAAf","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\nimport {\n    Cluster,\n    clusterApiUrl,\n    PublicKey,\n    Connection,\n    AccountInfo\n  } from \"@solana/web3.js\";\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n    \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n  );\n\n// Options to change RPC network\nconst CLUSTER = {\n    MAINNET: \"mainnet-beta\" as Cluster,\n    TESTNET: \"testnet\" as Cluster,\n    DEVNET: \"devnet\" as Cluster,\n}\n\n// Initialize Connection class\nconst connect = new Connection(\n    clusterApiUrl(CLUSTER.DEVNET),\n)\n\n// Exported function\nasync function getTokens (\n    wallet: PublicKey,\n): Promise<any> {\n\n    let tokenAccounts: Promise<any> = [ ];\n    tokenAccounts.push( connect.getParsedTokenAccountsByOwner (\n        wallet,\n        {programId: TOKEN_METADATA_PROGRAM_ID}\n    ).then(e => console.log(e.value))\n    )\n\n    console.log(tokenAccounts)\n\n    getMultipleAccounts(tokenAccounts)\n}\n\nconst getMultipleAccounts = async (\n    tokens: Array<PublicKey>\n) => {\n\n    let metadataAddresses = []\n    for (let i = 0; i < tokens.length; i++) {\n        metadataAddresses[i] = getMetadata(tokens[i])\n    }\n}\n\nconst getMetadata = async (\n    tokenIndex: PublicKey\n) => {\n\n}\n\nexport default getTokens\n"]},"metadata":{},"sourceType":"module"}
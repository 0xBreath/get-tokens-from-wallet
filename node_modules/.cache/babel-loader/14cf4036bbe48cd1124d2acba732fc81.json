{"ast":null,"code":"import * as anchor from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\nconst SPL_TOKEN_PROGRAM = new anchor.web3.PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"); // Options to change RPC network\n\nconst CLUSTER = {\n  MAINNET: \"mainnet-beta\",\n  TESTNET: \"testnet\",\n  DEVNET: \"devnet\"\n};\n/*\n// Initialize Connection class\nconst connect = new Connection(\n    clusterApiUrl(CLUSTER.DEVNET),\n)\n*/\n// Exported function\n\nasync function getTokenAccounts(wallet, connect) {\n  const tokenAccounts = connect.getTokenAccountsByOwner(wallet, {\n    programId: TOKEN_PROGRAM_ID\n  }).then(e => e.value);\n  /*\n  const tokens = () => {\n      Promise.all([tokenAccounts]).then(result => { result.values() })\n  }\n  */\n\n  /*\n  const tokenAccounts = connect.getParsedTokenAccountsByOwner (\n      wallet,\n      {programId: TOKEN_PROGRAM_ID}\n  ).then(e => e.value)\n  console.log(tokenAccounts)\n  */\n\n  const tokenObject = await Promise.all([tokenAccounts]).then(result => {\n    result.values();\n  });\n  console.log(tokenObject);\n  return 1;\n}\n/*\nconst getMultipleAccounts = async (\n    tokenArray: []\n) => {\n\n    let accounts = []\n    for (let i in tokenArray) {\n        accounts[i] = getMetadata(tokenArray[i])\n    }\n\n}\n\nconst getMetadata = async (\n    token: PublicKey\n): Promise<any> => {\n    return token.\n}\n*/\n\n\nexport default getTokenAccounts;","map":{"version":3,"sources":["/Users/drewriester/Coding/Solana/upgrade-nft/src/metadata/getMeta.ts"],"names":["anchor","TOKEN_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","web3","PublicKey","SPL_TOKEN_PROGRAM","CLUSTER","MAINNET","TESTNET","DEVNET","getTokenAccounts","wallet","connect","tokenAccounts","getTokenAccountsByOwner","programId","then","e","value","tokenObject","Promise","all","result","values","console","log"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,uBAAxB;AAQA,SAEEC,gBAFF,QAIO,mBAJP;AAMA,MAAMC,yBAAyB,GAAG,IAAIF,MAAM,CAACG,IAAP,CAAYC,SAAhB,CAC9B,6CAD8B,CAAlC;AAIA,MAAMC,iBAAiB,GAAG,IAAIL,MAAM,CAACG,IAAP,CAAYC,SAAhB,CACtB,6CADsB,CAA1B,C,CAIA;;AACA,MAAME,OAAO,GAAG;AACZC,EAAAA,OAAO,EAAE,cADG;AAEZC,EAAAA,OAAO,EAAE,SAFG;AAGZC,EAAAA,MAAM,EAAE;AAHI,CAAhB;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,eAAeC,gBAAf,CACIC,MADJ,EAEIC,OAFJ,EAGgB;AAEZ,QAAMC,aAAa,GAAGD,OAAO,CAACE,uBAAR,CAClBH,MADkB,EAElB;AAACI,IAAAA,SAAS,EAAEd;AAAZ,GAFkB,EAGpBe,IAHoB,CAGfC,CAAC,IAAIA,CAAC,CAACC,KAHQ,CAAtB;AAKA;AACJ;AACA;AACA;AACA;;AAGI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI,QAAMC,WAAW,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAY,CAACR,aAAD,CAAZ,EAA6BG,IAA7B,CAAkCM,MAAM,IAAI;AAAEA,IAAAA,MAAM,CAACC,MAAP;AAAiB,GAA/D,CAA1B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AAEA,SAAO,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeT,gBAAf","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\nimport {\n    Cluster,\n    clusterApiUrl,\n    PublicKey,\n    Connection,\n    AccountInfo\n  } from \"@solana/web3.js\";\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n    \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nconst SPL_TOKEN_PROGRAM = new anchor.web3.PublicKey(\n    \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\n// Options to change RPC network\nconst CLUSTER = {\n    MAINNET: \"mainnet-beta\" as Cluster,\n    TESTNET: \"testnet\" as Cluster,\n    DEVNET: \"devnet\" as Cluster,\n}\n/*\n// Initialize Connection class\nconst connect = new Connection(\n    clusterApiUrl(CLUSTER.DEVNET),\n)\n*/\n\n// Exported function\nasync function getTokenAccounts (\n    wallet: PublicKey,\n    connect: anchor.web3.Connection\n): Promise<any> {\n    \n    const tokenAccounts = connect.getTokenAccountsByOwner(\n        wallet,\n        {programId: TOKEN_PROGRAM_ID},\n    ).then(e => e.value)\n\n    /*\n    const tokens = () => {\n        Promise.all([tokenAccounts]).then(result => { result.values() })\n    }\n    */\n    \n    \n    /*\n    const tokenAccounts = connect.getParsedTokenAccountsByOwner (\n        wallet,\n        {programId: TOKEN_PROGRAM_ID}\n    ).then(e => e.value)\n    console.log(tokenAccounts)\n    */\n\n    const tokenObject = await Promise.all([tokenAccounts]).then(result => { result.values() })\n    console.log(tokenObject)\n\n    return 1\n}\n/*\nconst getMultipleAccounts = async (\n    tokenArray: []\n) => {\n\n    let accounts = []\n    for (let i in tokenArray) {\n        accounts[i] = getMetadata(tokenArray[i])\n    }\n\n}\n\nconst getMetadata = async (\n    token: PublicKey\n): Promise<any> => {\n    return token.\n}\n*/\n\nexport default getTokenAccounts\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as anchor from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\nconst SPL_TOKEN_PROGRAM = new anchor.web3.PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"); // Exported function\n\nasync function getTokenAccounts(wallet, connect) {\n  const tokenAccounts = connect.getTokenAccountsByOwner(wallet, {\n    programId: TOKEN_PROGRAM_ID\n  }).then(e => e.value);\n  print('ENTRANCE');\n  /*\n  const tokens = () => {\n      Promise.all([tokenAccounts]).then(result => { result.values() })\n  }\n  */\n\n  /*\n  const tokenAccounts = connect.getParsedTokenAccountsByOwner (\n      wallet,\n      {programId: TOKEN_PROGRAM_ID}\n  ).then(e => e.value)\n  console.log(tokenAccounts)\n  */\n\n  const tokenObject = await Promise.all([tokenAccounts]).then(result => {\n    result.values();\n  });\n  return 1;\n}\n\nconst getMultipleAccounts = async tokenArray => {\n  /*\n      let accounts = []\n      for (let i in tokenArray) {\n          accounts[i] = getMetadata(tokenArray[i])\n      }\n  */\n};\n\nconst getMetadata = async token => {\n  return token;\n};\n\nexport default getTokenAccounts;","map":{"version":3,"sources":["/Users/drewriester/Coding/Solana/upgrade-nft/src/metadata/getMeta.ts"],"names":["anchor","TOKEN_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","web3","PublicKey","SPL_TOKEN_PROGRAM","getTokenAccounts","wallet","connect","tokenAccounts","getTokenAccountsByOwner","programId","then","e","value","print","tokenObject","Promise","all","result","values","getMultipleAccounts","tokenArray","getMetadata","token"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,uBAAxB;AAMA,SACEC,gBADF,QAEO,mBAFP;AAIA,MAAMC,yBAAyB,GAAG,IAAIF,MAAM,CAACG,IAAP,CAAYC,SAAhB,CAC9B,6CAD8B,CAAlC;AAIA,MAAMC,iBAAiB,GAAG,IAAIL,MAAM,CAACG,IAAP,CAAYC,SAAhB,CACtB,6CADsB,CAA1B,C,CAIA;;AACA,eAAeE,gBAAf,CACIC,MADJ,EAEIC,OAFJ,EAGgB;AAEZ,QAAMC,aAAa,GAAGD,OAAO,CAACE,uBAAR,CAClBH,MADkB,EAElB;AAACI,IAAAA,SAAS,EAAEV;AAAZ,GAFkB,EAGpBW,IAHoB,CAGfC,CAAC,IAAIA,CAAC,CAACC,KAHQ,CAAtB;AAKAC,EAAAA,KAAK,CAAC,UAAD,CAAL;AAGA;AACJ;AACA;AACA;AACA;;AAGI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI,QAAMC,WAAW,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAY,CAACT,aAAD,CAAZ,EAA6BG,IAA7B,CAAkCO,MAAM,IAAI;AAAEA,IAAAA,MAAM,CAACC,MAAP;AAAiB,GAA/D,CAA1B;AAGA,SAAO,CAAP;AACH;;AAED,MAAMC,mBAAmB,GAAG,MACxBC,UADwB,IAEvB;AACL;AACA;AACA;AACA;AACA;AACA;AACC,CATD;;AAWA,MAAMC,WAAW,GAAG,MAChBC,KADgB,IAED;AACf,SAAOA,KAAP;AACH,CAJD;;AAOA,eAAelB,gBAAf","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\nimport {\n    PublicKey,\n    Connection,\n    AccountInfo\n  } from \"@solana/web3.js\";\nimport {\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n    \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nconst SPL_TOKEN_PROGRAM = new anchor.web3.PublicKey(\n    \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\n// Exported function\nasync function getTokenAccounts (\n    wallet: PublicKey,\n    connect: anchor.web3.Connection\n): Promise<any> {\n\n    const tokenAccounts = connect.getTokenAccountsByOwner(\n        wallet,\n        {programId: TOKEN_PROGRAM_ID},\n    ).then(e => e.value)\n\n    print('ENTRANCE')\n\n\n    /*\n    const tokens = () => {\n        Promise.all([tokenAccounts]).then(result => { result.values() })\n    }\n    */\n    \n    \n    /*\n    const tokenAccounts = connect.getParsedTokenAccountsByOwner (\n        wallet,\n        {programId: TOKEN_PROGRAM_ID}\n    ).then(e => e.value)\n    console.log(tokenAccounts)\n    */\n\n    const tokenObject = await Promise.all([tokenAccounts]).then(result => { result.values() })\n\n\n    return 1\n}\n\nconst getMultipleAccounts = async (\n    tokenArray: []\n) => {\n/*\n    let accounts = []\n    for (let i in tokenArray) {\n        accounts[i] = getMetadata(tokenArray[i])\n    }\n*/\n}\n\nconst getMetadata = async (\n    token: PublicKey\n): Promise<any> => {\n    return token\n}\n\n\nexport default getTokenAccounts\n"]},"metadata":{},"sourceType":"module"}
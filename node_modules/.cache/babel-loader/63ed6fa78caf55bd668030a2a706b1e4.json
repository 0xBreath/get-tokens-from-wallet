{"ast":null,"code":"import * as anchor from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\nconst SPL_TOKEN_PROGRAM = new anchor.web3.PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"); // Exported function\n\nasync function getTokenAccounts(wallet, connect) {\n  const tokenAccounts = connect.getParsedTokenAccountsByOwner(wallet, {\n    programId: TOKEN_PROGRAM_ID\n  }).then(e => e.value);\n  console.log(tokenAccounts);\n  let size = (await tokenAccounts).length;\n  console.log(size);\n  let account = tokenAccounts.toString();\n  console.log(account);\n\n  for (let i = 0; i < size; i++) {}\n  /*\n      const getMint = async (\n          tokenAccountPubkey: PublicKey\n      ) => {\n          const tokenMintData = (\n              await connect.getParsedAccountInfo(\n                  tokenAccountPubkey,\n                  \"singleGossip\"\n              )\n          ).value!.data;\n          //@ts-expect-error (doing the data parsing into steps so this ignore line is not moved around by formatting)\n          const tokenMintAddress = tokenMintData.parsed.info.mint;\n        \n          return new PublicKey(tokenMintAddress)\n      }\n      console.log(getMint)\n    */\n\n}\n\nconst getMultipleAccounts = async tokenArray => {\n  /*\n      let accounts = []\n      for (let i in tokenArray) {\n          accounts[i] = getMetadata(tokenArray[i])\n      }\n  */\n};\n\nconst getMetadata = async token => {\n  return token;\n};\n\nexport default getTokenAccounts;","map":{"version":3,"sources":["/Users/drewriester/Coding/Solana/upgrade-nft/src/metadata/getMeta.ts"],"names":["anchor","TOKEN_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","web3","PublicKey","SPL_TOKEN_PROGRAM","getTokenAccounts","wallet","connect","tokenAccounts","getParsedTokenAccountsByOwner","programId","then","e","value","console","log","size","length","account","toString","i","getMultipleAccounts","tokenArray","getMetadata","token"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,uBAAxB;AAKA,SACEC,gBADF,QAEO,mBAFP;AAIA,MAAMC,yBAAyB,GAAG,IAAIF,MAAM,CAACG,IAAP,CAAYC,SAAhB,CAC9B,6CAD8B,CAAlC;AAIA,MAAMC,iBAAiB,GAAG,IAAIL,MAAM,CAACG,IAAP,CAAYC,SAAhB,CACtB,6CADsB,CAA1B,C,CAIA;;AACA,eAAeE,gBAAf,CACIC,MADJ,EAEIC,OAFJ,EAGgB;AAEZ,QAAMC,aAAa,GAAGD,OAAO,CAACE,6BAAR,CAClBH,MADkB,EAElB;AAACI,IAAAA,SAAS,EAAEV;AAAZ,GAFkB,EAGpBW,IAHoB,CAGfC,CAAC,IAAIA,CAAC,CAACC,KAHQ,CAAtB;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,aAAZ;AAEA,MAAIQ,IAAI,GAAG,CAAC,MAAMR,aAAP,EAAsBS,MAAjC;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AAEA,MAAIE,OAAO,GAAGV,aAAa,CAACW,QAAd,EAAd;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ;;AAEA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B,CAE9B;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;;AAED,MAAMC,mBAAmB,GAAG,MACxBC,UADwB,IAEvB;AACL;AACA;AACA;AACA;AACA;AACA;AACC,CATD;;AAWA,MAAMC,WAAW,GAAG,MAChBC,KADgB,IAED;AACf,SAAOA,KAAP;AACH,CAJD;;AAOA,eAAenB,gBAAf","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\nimport {\n    PublicKey,\n    Connection\n} from \"@solana/web3.js\";\nimport {\n  TOKEN_PROGRAM_ID\n} from \"@solana/spl-token\";\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n    \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nconst SPL_TOKEN_PROGRAM = new anchor.web3.PublicKey(\n    \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\n// Exported function\nasync function getTokenAccounts (\n    wallet: PublicKey,\n    connect: anchor.web3.Connection\n): Promise<any> {\n    \n    const tokenAccounts = connect.getParsedTokenAccountsByOwner(\n        wallet,\n        {programId: TOKEN_PROGRAM_ID},\n    ).then(e => e.value)\n\n    console.log(tokenAccounts)\n\n    let size = (await tokenAccounts).length\n    console.log(size)\n\n    let account = tokenAccounts.toString()\n    console.log(account)\n\n    for (let i = 0; i < size; i++) {\n\n    }\n/*\n    const getMint = async (\n        tokenAccountPubkey: PublicKey\n    ) => {\n        const tokenMintData = (\n            await connect.getParsedAccountInfo(\n                tokenAccountPubkey,\n                \"singleGossip\"\n            )\n        ).value!.data;\n        //@ts-expect-error (doing the data parsing into steps so this ignore line is not moved around by formatting)\n        const tokenMintAddress = tokenMintData.parsed.info.mint;\n      \n        return new PublicKey(tokenMintAddress)\n    }\n    console.log(getMint)\n  */  \n\n}\n\nconst getMultipleAccounts = async (\n    tokenArray: []\n) => {\n/*\n    let accounts = []\n    for (let i in tokenArray) {\n        accounts[i] = getMetadata(tokenArray[i])\n    }\n*/\n}\n\nconst getMetadata = async (\n    token: PublicKey\n): Promise<any> => {\n    return token\n}\n\n\nexport default getTokenAccounts\n"]},"metadata":{},"sourceType":"module"}
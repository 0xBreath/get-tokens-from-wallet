{"ast":null,"code":"var _jsxFileName = \"/Users/drewriester/Coding/Solana/upgrade-nft/src/Home.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport Meta from './metadata/getMeta';\nimport { awaitTransactionSignatureConfirmation, getCandyMachineState, mintOneToken, shortenAddress } from \"./candy-machine\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectButton = styled(WalletDialogButton)``;\n_c = ConnectButton;\nconst CounterText = styled.span``; // add your styles here\n\n_c2 = CounterText;\nconst MintContainer = styled.div``; // add your styles here\n\n_c3 = MintContainer;\nconst MintButton = styled(Button)``; // add your styles here\n\n_c4 = MintButton;\n\nconst Home = props => {\n  _s();\n\n  const [balance, setBalance] = useState();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [itemsAvailable, setItemsAvailable] = useState(0);\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: \"\",\n    severity: undefined\n  });\n\n  const CallMeta = addr => {\n    {\n      Meta(addr);\n    }\n  };\n\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState();\n\n  const refreshCandyMachineState = () => {\n    (async () => {\n      if (!wallet) return;\n      const {\n        candyMachine,\n        goLiveDate,\n        itemsAvailable,\n        itemsRemaining,\n        itemsRedeemed\n      } = await getCandyMachineState(wallet, props.candyMachineId, props.connection);\n      setItemsAvailable(itemsAvailable);\n      setItemsRemaining(itemsRemaining);\n      setItemsRedeemed(itemsRedeemed);\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  };\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n\n      if (wallet && (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.program)) {\n        const mintTxId = await mintOneToken(candyMachine, props.config, wallet.publicKey, props.treasury);\n        const status = await awaitTransactionSignatureConfirmation(mintTxId, props.txTimeout, props.connection, \"singleGossip\", false);\n\n        if (!(status === null || status === void 0 ? void 0 : status.err)) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\"\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\"\n          });\n        }\n      }\n    } catch (error) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {} else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          setIsSoldOut(true);\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\"\n      });\n    } finally {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n\n      setIsMinting(false);\n      refreshCandyMachineState();\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n  useEffect(refreshCandyMachineState, [wallet, props.candyMachineId, props.connection]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [wallet && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Wallet \", CallMeta(wallet.publicKey)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this), wallet && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Wallet \", shortenAddress(wallet.publicKey.toBase58() || \"\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this), wallet && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Balance: \", (balance || 0).toLocaleString(), \" SOL\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 18\n    }, this), wallet && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total Available: \", itemsAvailable]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 18\n    }, this), wallet && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Redeemed: \", itemsRedeemed]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 18\n    }, this), wallet && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Remaining: \", itemsRemaining]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(MintContainer, {\n      children: !wallet ? /*#__PURE__*/_jsxDEV(ConnectButton, {\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(MintButton, {\n        disabled: isSoldOut || isMinting || !isActive,\n        onClick: onMint,\n        variant: \"contained\",\n        children: isSoldOut ? \"SOLD OUT\" : isActive ? isMinting ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 17\n        }, this) : \"MINT\" : /*#__PURE__*/_jsxDEV(Countdown, {\n          date: startDate,\n          onMount: _ref => {\n            let {\n              completed\n            } = _ref;\n            return completed && setIsActive(true);\n          },\n          onComplete: () => setIsActive(true),\n          renderer: renderCounter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: alertState.open,\n      autoHideDuration: 6000,\n      onClose: () => setAlertState({ ...alertState,\n        open: false\n      }),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setAlertState({ ...alertState,\n          open: false\n        }),\n        severity: alertState.severity,\n        children: alertState.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"yHayHpgobvE+v8EDXLv1P69gkss=\", false, function () {\n  return [useAnchorWallet];\n});\n\n_c5 = Home;\n\nconst renderCounter = _ref2 => {\n  let {\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(CounterText, {\n    children: [hours + (days || 0) * 24, \" hours, \", minutes, \" minutes, \", seconds, \" seconds\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n};\n/*\nconst ConnectButton = styled(WalletDialogButton)``;\n\nfunction Home () {\n\n  const wallet = useAnchorWallet();\n\n  return (\n    (!wallet ? \n      (<ConnectButton>Bravo</ConnectButton>) :\n      ( <div></div> )\n    )\n  )\n\n}*/\n\n\nexport default Home;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ConnectButton\");\n$RefreshReg$(_c2, \"CounterText\");\n$RefreshReg$(_c3, \"MintContainer\");\n$RefreshReg$(_c4, \"MintButton\");\n$RefreshReg$(_c5, \"Home\");","map":{"version":3,"sources":["/Users/drewriester/Coding/Solana/upgrade-nft/src/Home.tsx"],"names":["useEffect","useState","styled","Countdown","Button","CircularProgress","Snackbar","Alert","LAMPORTS_PER_SOL","useAnchorWallet","WalletDialogButton","Meta","awaitTransactionSignatureConfirmation","getCandyMachineState","mintOneToken","shortenAddress","ConnectButton","CounterText","span","MintContainer","div","MintButton","Home","props","balance","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","itemsAvailable","setItemsAvailable","itemsRedeemed","setItemsRedeemed","itemsRemaining","setItemsRemaining","alertState","setAlertState","open","message","severity","undefined","CallMeta","addr","startDate","setStartDate","Date","wallet","candyMachine","setCandyMachine","refreshCandyMachineState","goLiveDate","candyMachineId","connection","onMint","program","mintTxId","config","publicKey","treasury","status","txTimeout","err","error","msg","indexOf","code","getBalance","toBase58","toLocaleString","completed","renderCounter","days","hours","minutes","seconds"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport Meta from './metadata/getMeta'\n\n\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"./candy-machine\";\nimport { CallMissedOutgoingSharp } from \"@material-ui/icons\";\n\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst CounterText = styled.span``; // add your styles here\n\nconst MintContainer = styled.div``; // add your styles here\n\nconst MintButton = styled(Button)``; // add your styles here\n\nexport interface HomeProps {\n  candyMachineId: anchor.web3.PublicKey;\n  config: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  treasury: anchor.web3.PublicKey;\n  txTimeout: number;\n}\n\nconst Home = (props: HomeProps) => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [itemsAvailable, setItemsAvailable] = useState(0);\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const CallMeta = (\n    addr: anchor.web3.PublicKey\n  ) => {\n    {Meta(addr)}\n  }\n\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n\n  const wallet = useAnchorWallet();\n\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  const refreshCandyMachineState = () => {\n    (async () => {\n      if (!wallet) return;\n\n      const {\n        candyMachine,\n        goLiveDate,\n        itemsAvailable,\n        itemsRemaining,\n        itemsRedeemed,\n      } = await getCandyMachineState(\n        wallet as anchor.Wallet,\n        props.candyMachineId,\n        props.connection\n      );\n\n      setItemsAvailable(itemsAvailable);\n      setItemsRemaining(itemsRemaining);\n      setItemsRedeemed(itemsRedeemed);\n\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  };\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      if (wallet && candyMachine?.program) {\n\n        const mintTxId = await mintOneToken(\n          candyMachine,\n          props.config,\n          wallet.publicKey,\n          props.treasury\n        );\n\n        const status = await awaitTransactionSignatureConfirmation(\n          mintTxId,\n          props.txTimeout,\n          props.connection,\n          \"singleGossip\",\n          false\n        );\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          setIsSoldOut(true);\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n    } finally {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n      setIsMinting(false);\n      refreshCandyMachineState();\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n\n  useEffect(refreshCandyMachineState, [\n    wallet,\n    props.candyMachineId,\n    props.connection,\n  ]);\n\n  return (\n    <main>\n\n      {wallet && (\n        <p>Wallet {CallMeta(wallet.publicKey)}</p>\n      )}  \n\n      {wallet && (\n        <p>Wallet {shortenAddress(wallet.publicKey.toBase58() || \"\")}</p>\n      )}\n\n      {wallet && <p>Balance: {(balance || 0).toLocaleString()} SOL</p>}\n\n      {wallet && <p>Total Available: {itemsAvailable}</p>}\n\n      {wallet && <p>Redeemed: {itemsRedeemed}</p>}\n\n      {wallet && <p>Remaining: {itemsRemaining}</p>}\n\n\n      <MintContainer>\n        {!wallet ? (\n          <ConnectButton>Connect Wallet</ConnectButton>\n        ) : (\n          <MintButton\n            disabled={isSoldOut || isMinting || !isActive}\n            onClick={onMint}\n            variant=\"contained\"\n          >\n\n            {isSoldOut ? (\n              \"SOLD OUT\"\n            ) : isActive ? (\n              isMinting ? (\n                <CircularProgress />\n              ) : (\n                \"MINT\"\n              )\n            ) : (\n              <Countdown\n                date={startDate}\n                onMount={({ completed }) => completed && setIsActive(true)}\n                onComplete={() => setIsActive(true)}\n                renderer={renderCounter}\n              />\n            )}\n          </MintButton>\n        )}\n      </MintContainer>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </main>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n  return (\n    <CounterText>\n      {hours + (days || 0) * 24} hours, {minutes} minutes, {seconds} seconds\n    </CounterText>\n  );\n};\n\n\n/*\nconst ConnectButton = styled(WalletDialogButton)``;\n\nfunction Home () {\n\n  const wallet = useAnchorWallet();\n\n  return (\n    (!wallet ? \n      (<ConnectButton>Bravo</ConnectButton>) :\n      ( <div></div> )\n    )\n  )\n\n}*/\n\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}
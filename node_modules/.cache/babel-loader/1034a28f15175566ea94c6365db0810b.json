{"ast":null,"code":"import * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl, Connection } from \"@solana/web3.js\";\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\nconst SPL_TOKEN_PROGRAM = new anchor.web3.PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"); // Options to change RPC network\n\nconst CLUSTER = {\n  MAINNET: \"mainnet-beta\",\n  TESTNET: \"testnet\",\n  DEVNET: \"devnet\"\n}; // Initialize Connection class\n\nconst connect = new Connection(clusterApiUrl(CLUSTER.DEVNET)); // Exported function\n\nasync function getTokenAccounts(wallet) {\n  const tokenAccounts = connect.getParsedTokenAccountsByOwner(wallet, {\n    programId: TOKEN_METADATA_PROGRAM_ID\n  }).then(e => e.value);\n  console.log(tokenAccounts);\n  let tokens = tokenAccounts.toString()[0];\n  console.log(tokenAccounts);\n  return getMultipleAccounts(tokenAccounts);\n}\n\nconst getMultipleAccounts = async tokens => {\n  /*\n      let metadataAddresses = []\n      for (let i = 0; i < tokens.length; i++) {\n          metadataAddresses[i] = getMetadata(tokens[i])\n      }\n  */\n};\n\nconst getMetadata = async tokenIndex => {};\n\nexport default getTokenAccounts;","map":{"version":3,"sources":["/Users/drewriester/Coding/Solana/upgrade-nft/src/metadata/getMeta.ts"],"names":["anchor","clusterApiUrl","Connection","TOKEN_METADATA_PROGRAM_ID","web3","PublicKey","SPL_TOKEN_PROGRAM","CLUSTER","MAINNET","TESTNET","DEVNET","connect","getTokenAccounts","wallet","tokenAccounts","getParsedTokenAccountsByOwner","programId","then","e","value","console","log","tokens","toString","getMultipleAccounts","getMetadata","tokenIndex"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,uBAAxB;AACA,SAEIC,aAFJ,EAIIC,UAJJ,QAMS,iBANT;AAaA,MAAMC,yBAAyB,GAAG,IAAIH,MAAM,CAACI,IAAP,CAAYC,SAAhB,CAC9B,6CAD8B,CAAlC;AAIA,MAAMC,iBAAiB,GAAG,IAAIN,MAAM,CAACI,IAAP,CAAYC,SAAhB,CACtB,6CADsB,CAA1B,C,CAIA;;AACA,MAAME,OAAO,GAAG;AACZC,EAAAA,OAAO,EAAE,cADG;AAEZC,EAAAA,OAAO,EAAE,SAFG;AAGZC,EAAAA,MAAM,EAAE;AAHI,CAAhB,C,CAMA;;AACA,MAAMC,OAAO,GAAG,IAAIT,UAAJ,CACZD,aAAa,CAACM,OAAO,CAACG,MAAT,CADD,CAAhB,C,CAIA;;AACA,eAAeE,gBAAf,CACIC,MADJ,EAEgB;AAEZ,QAAMC,aAAa,GAAGH,OAAO,CAACI,6BAAR,CAClBF,MADkB,EAElB;AAACG,IAAAA,SAAS,EAAEb;AAAZ,GAFkB,EAGpBc,IAHoB,CAGfC,CAAC,IAAIA,CAAC,CAACC,KAHQ,CAAtB;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,aAAZ;AACA,MAAIQ,MAAM,GAAGR,aAAa,CAACS,QAAd,GAAyB,CAAzB,CAAb;AAEAH,EAAAA,OAAO,CAACC,GAAR,CAAYP,aAAZ;AAEA,SAAOU,mBAAmB,CAACV,aAAD,CAA1B;AAEH;;AAED,MAAMU,mBAAmB,GAAG,MACxBF,MADwB,IAKvB;AACL;AACA;AACA;AACA;AACA;AACA;AACC,CAZD;;AAcA,MAAMG,WAAW,GAAG,MAChBC,UADgB,IAEf,CAEJ,CAJD;;AAMA,eAAed,gBAAf","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\nimport {\n    Cluster,\n    clusterApiUrl,\n    PublicKey,\n    Connection,\n    AccountInfo\n  } from \"@solana/web3.js\";\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n    \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nconst SPL_TOKEN_PROGRAM = new anchor.web3.PublicKey(\n    \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\n// Options to change RPC network\nconst CLUSTER = {\n    MAINNET: \"mainnet-beta\" as Cluster,\n    TESTNET: \"testnet\" as Cluster,\n    DEVNET: \"devnet\" as Cluster,\n}\n\n// Initialize Connection class\nconst connect = new Connection(\n    clusterApiUrl(CLUSTER.DEVNET),\n)\n\n// Exported function\nasync function getTokenAccounts (\n    wallet: PublicKey,\n): Promise<any> {\n\n    const tokenAccounts = connect.getParsedTokenAccountsByOwner (\n        wallet,\n        {programId: TOKEN_METADATA_PROGRAM_ID}\n    ).then(e => e.value)\n\n    console.log(tokenAccounts)\n    let tokens = tokenAccounts.toString()[0]\n\n    console.log(tokenAccounts)\n\n    return getMultipleAccounts(tokenAccounts)\n\n}\n\nconst getMultipleAccounts = async (\n    tokens: Promise<{\n        pubkey: anchor.web3.PublicKey;\n        account: anchor.web3.AccountInfo<anchor.web3.ParsedAccountData>;\n    }[]>\n) => {\n/*\n    let metadataAddresses = []\n    for (let i = 0; i < tokens.length; i++) {\n        metadataAddresses[i] = getMetadata(tokens[i])\n    }\n*/\n}\n\nconst getMetadata = async (\n    tokenIndex: PublicKey\n) => {\n\n}\n\nexport default getTokenAccounts\n"]},"metadata":{},"sourceType":"module"}